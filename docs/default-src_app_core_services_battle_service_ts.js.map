{"version":3,"file":"default-src_app_core_services_battle_service_ts.js","mappings":";;;;;;;;;;;;;;;;;;;;;;AACuC;AAIyB;AACvB;AACQ;AACK;AACP;;;;;;AAGxC,IAAMM,aAAa;EAApB,MAAOA,aAAa;IAKdC,MAAA;IACAC,aAAA;IACAC,QAAA;IACAC,YAAA;IAPFC,cAAc,GAAG,IAAIX,iDAAe,CAAgB,IAAI,CAAC;IACzDY,SAAS;IAEjBC,YACUN,MAAc,EACdC,aAA4B,EAC5BC,QAAyB,EACzBC,YAA0B;MAH1B,KAAAH,MAAM,GAANA,MAAM;MACN,KAAAC,aAAa,GAAbA,aAAa;MACb,KAAAC,QAAQ,GAARA,QAAQ;MACR,KAAAC,YAAY,GAAZA,YAAY;IAClB;IAEJI,YAAYA,CAACC,KAAgB;MAC3B,IAAI,CAACH,SAAS,GAAGG,KAAK;IACxB;IAEDC,WAAWA,CAACC,MAAc;MACzB,MAAMC,IAAI,GAAG,IAAI,CAACN,SAAS,CAACO,MAAM,CAACC,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKL,MAAM,CAAC;MAC7D,IAAI,CAACC,IAAI,EAAE;MAEX,MAAMK,oBAAoB,GAAG,IAAI,CAACf,aAAa,CAACgB,iBAAiB,EAAE;MACnE,IAAI,CAACD,oBAAoB,EAAE;MAE3B,MAAME,kBAAkB,GAAGP,IAAI,CAACQ,UAAU,CAACC,MAAM,CAACC,GAAG,IACnD3B,4EAAiB,CAAC2B,GAAG,CAACC,SAAS,EAAEN,oBAAoB,CAAC,CACvD;MAED,MAAMO,MAAM,GAAW;QACrBR,EAAE,EAAE,GAAGL,MAAM,IAAIc,IAAI,CAACC,GAAG,EAAE,EAAE;QAC7Bf,MAAM,EAAEC,IAAI,CAACI,EAAE;QACfW,kBAAkB,EAAER,kBAAkB;QACtCS,SAAS,EAAE,IAAIH,IAAI;OACpB;MAED,IAAI,CAACpB,cAAc,CAACwB,IAAI,CAACL,MAAM,CAAC;IAClC;IAGEM,gBAAgBA,CAAA;MACd,OAAO,IAAI,CAACzB,cAAc,CAAC0B,YAAY,EAAE;IAC3C;IAEMC,YAAYA,CAACC,GAAY;MAAA,IAAAC,KAAA;MAAA,OAAAC,wKAAA;QAC7B,MAAMX,MAAM,GAAGU,KAAI,CAAC7B,cAAc,CAAC+B,KAAK;QACxC,IAAI,CAACZ,MAAM,EAAE;QAEbA,MAAM,CAACa,OAAO,GAAGJ,GAAG,GAAG,KAAK,GAAG,MAAM;QACrCT,MAAM,CAACc,UAAU,GAAG,IAAIb,IAAI,EAAE;QAE9B,MAAMb,IAAI,GAAGsB,KAAI,CAAC5B,SAAS,CAACO,MAAM,CAACC,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKQ,MAAM,CAACb,MAAM,CAAC;QACpE,IAAIC,IAAI,EAAE;UACR,IAAIqB,GAAG,EAAE;YACPrB,IAAI,CAAC2B,QAAQ,GAAG,IAAI;YACpBL,KAAI,CAAC9B,YAAY,CAACoC,UAAU,CAAC,6BAA6B,CAAC;UAC7D,CAAC,MAAM;YACL5B,IAAI,CAAC6B,QAAQ,GAAG,CAAC7B,IAAI,CAAC6B,QAAQ,IAAI,CAAC,IAAI,CAAC;YACxCP,KAAI,CAAC9B,YAAY,CAACoC,UAAU,CAAC,SAAS,CAAC;UACzC;QACF;QAEAN,KAAI,CAAC5B,SAAS,CAACoC,OAAO,CAACC,IAAI,CAACnB,MAAM,CAAC;QACnCU,KAAI,CAAC7B,cAAc,CAACwB,IAAI,CAAC,IAAI,CAAC;QAE9B,MAAMK,KAAI,CAAC/B,QAAQ,CAACyC,iBAAiB,EAAE;QAEvCV,KAAI,CAACjC,MAAM,CAAC4C,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;MAAC;IAClC;IAEAC,WAAWA,CAAA;MACT,OAAO,IAAI,CAACxC,SAAS,CAACoC,OAAO;IAC/B;;uBArEW1C,aAAa,EAAA+C,sDAAA,CAAAE,mDAAA,GAAAF,sDAAA,CAAAG,0DAAA,GAAAH,sDAAA,CAAAI,+DAAA,GAAAJ,sDAAA,CAAAK,wDAAA;IAAA;;aAAbpD,aAAa;MAAAqD,OAAA,EAAbrD,aAAa,CAAAsD,IAAA;MAAAC,UAAA,EADA;IAAM;;SACnBvD,aAAa;AAAA,K;;;;;;;;;;;;;;;;;;;ACX2B;AAEf;;;AAQ/B,IAAMF,eAAe;EAAtB,MAAOA,eAAe;IAIN4D,EAAA;IAHZC,eAAe;IACfC,sBAAsB;IAE9BrD,YAAoBmD,EAAuB;MAAvB,KAAAA,EAAE,GAAFA,EAAE;IAAwB;IAE9CG,uBAAuBA,CAACC,OAAwB;MAC9C,IAAI,CAACF,sBAAsB,GAAGE,OAAO;IACvC;IAEMC,WAAWA,CAACtD,KAA4B;MAAA,IAAAyB,KAAA;MAAA,OAAAC,wKAAA;QAC5C1B,KAAK,CAACuD,SAAS,GAAG,IAAIvC,IAAI,EAAE;QAC5B,MAAMwC,MAAM,SAASR,oDAAc,CAACvB,KAAI,CAACwB,EAAE,CAACQ,GAAG,CAAC,YAAY,EAAEzD,KAAK,CAAC,CAAC;QACrE,MAAMO,EAAE,GAAG,OAAOiD,MAAM,KAAK,QAAQ,GAAGA,MAAM,GAAIA,MAAc,CAACjD,EAAE;QACnEkB,KAAI,CAACyB,eAAe,GAAG3C,EAAE;QACzB,OAAO;UAAE,GAAGP,KAAK;UAAEO;QAAE,CAAE;MAAC;IAC1B;IAEM4B,iBAAiBA,CAAA;MAAA,IAAAuB,MAAA;MAAA,OAAAhC,wKAAA;QACrB,IAAI,CAACgC,MAAI,CAACP,sBAAsB,EAAE,MAAM,IAAIQ,KAAK,CAAC,iCAAiC,CAAC;QACpF,MAAMC,QAAQ,GAAGF,MAAI,CAACP,sBAAsB,EAAE;QAC9CS,QAAQ,CAACL,SAAS,GAAG,IAAIvC,IAAI,EAAE;QAC/B,OAAO0C,MAAI,CAACG,UAAU,CAACD,QAAQ,CAAC;MAAC;IACnC;IAEMC,UAAUA,CAAC7D,KAAgB;MAAA,IAAA8D,MAAA;MAAA,OAAApC,wKAAA;QAC/B,MAAMsB,oDAAc,CAACc,MAAI,CAACb,EAAE,CAACc,MAAM,CAAC,YAAY,EAAE/D,KAAK,CAAC,CAAC;QACzD,OAAOA,KAAK;MAAC;IACf;IAEMgE,QAAQA,CAACzD,EAAU;MAAA,IAAA0D,MAAA;MAAA,OAAAvC,wKAAA;QACvBuC,MAAI,CAACf,eAAe,GAAG3C,EAAE;QACzB,OAAOyC,oDAAc,CAACiB,MAAI,CAAChB,EAAE,CAACiB,QAAQ,CAAC,YAAY,EAAE3D,EAAE,CAAC,CAAC;MAAC;IAC5D;IAEM4D,SAASA,CAAA;MAAA,IAAAC,MAAA;MAAA,OAAA1C,wKAAA;QACb,OAAOsB,oDAAc,CAACoB,MAAI,CAACnB,EAAE,CAACoB,MAAM,CAAC,YAAY,CAAC,CAAC;MAAC;IACtD;;uBArCWhF,eAAe,EAAAiD,sDAAA,CAAAE,+DAAA;IAAA;;aAAfnD,eAAe;MAAAuD,OAAA,EAAfvD,eAAe,CAAAwD,IAAA;MAAAC,UAAA,EADF;IAAM;;SACnBzD,eAAe;AAAA,K;;;;;;;;;;;;;;;;;;;;ACVW;AAGyC;AAC1B;AACJ;AACS;;;;AAGpD,IAAMD,aAAa;EAApB,MAAOA,aAAa;IAGJM,QAAA;IAAmC+E,KAAA;IAF/CC,OAAO,GAAG,IAAIzF,iDAAe,CAAqB,IAAI,CAAC;IAE/Da,YAAoBJ,QAAyB,EAAU+E,KAAmB;MAAtD,KAAA/E,QAAQ,GAARA,QAAQ;MAA2B,KAAA+E,KAAK,GAALA,KAAK;IAAkB;IAE9EE,SAASA,CAACC,KAAkB;MAC1B,IAAI,CAACF,OAAO,CAACtD,IAAI,CAAC;QAAE,GAAGwD;MAAK,CAAE,CAAC;IACjC;IAEAC,SAASA,CAAA;MACP,OAAO,IAAI,CAACH,OAAO,CAACpD,YAAY,EAAE;IACpC;IAEAe,WAAWA,CAAA;MACT,OAAO,IAAI,CAACqC,OAAO,CAAC/C,KAAK;IAC3B;IAEAmD,YAAYA,CAACF,KAAkB;MAC7B,IAAI,CAACF,OAAO,CAACtD,IAAI,CAAC;QAAE,GAAGwD;MAAK,CAAE,CAAC;MAC/B,IAAI,CAAClF,QAAQ,CAACyC,iBAAiB,EAAE;IACnC;IAEA4C,GAAGA,CAACC,MAAc;MAChB,MAAMJ,KAAK,GAAG,IAAI,CAACF,OAAO,CAAC/C,KAAK;MAChC,IAAI,CAACiD,KAAK,IAAIA,KAAK,CAACK,KAAK,GAAGD,MAAM,EAAE,OAAO,KAAK;MAEhDJ,KAAK,CAACK,KAAK,IAAID,MAAM;MACrB,IAAI,CAACE,MAAM,CAACN,KAAK,CAAC,CAAC,CAAC;MACpB,OAAO,IAAI;IACb;IAEAO,KAAKA,CAACH,MAAc;MAClB,MAAMJ,KAAK,GAAG,IAAI,CAACF,OAAO,CAAC/C,KAAK;MAChC,IAAI,CAACiD,KAAK,EAAE;MAEZ,MAAMQ,QAAQ,GAAGR,KAAK,CAACS,KAAK;MAC5B,MAAMC,KAAK,GAAGV,KAAK,CAACW,UAAU,GAAGP,MAAM;MACvC,MAAMQ,QAAQ,GAAGjB,8DAAa,CAACe,KAAK,CAAC;MAErC,MAAMG,SAAS,GAAGD,QAAQ,GAAGJ,QAAQ;MAErC,IAAIK,SAAS,GAAG,CAAC,EAAE;QACjB,IAAI,CAAChB,KAAK,CAACiB,IAAI,CAAC,uBAAuBF,QAAQ,GAAG,CAAC;QAEnD;QACAZ,KAAK,CAACe,EAAE,IAAI,CAAC,GAAGF,SAAS;QACzBb,KAAK,CAACgB,QAAQ,IAAI,CAAC,GAAGH,SAAS;QAC/Bb,KAAK,CAACiB,OAAO,IAAI,CAAC,GAAGJ,SAAS;QAC9Bb,KAAK,CAACkB,YAAY,IAAI,CAAC,GAAGL,SAAS;MACrC;MAEA,IAAI,CAACP,MAAM,CAAC;QACV,GAAGN,KAAK;QACRW,UAAU,EAAED,KAAK;QACjBD,KAAK,EAAEG;OACR,CAAC;IACJ;IAEAO,QAAQA,CAACf,MAAc;MACrB,MAAMJ,KAAK,GAAG,IAAI,CAACF,OAAO,CAAC/C,KAAK;MAChC,IAAI,CAACiD,KAAK,EAAE;MACZA,KAAK,CAACK,KAAK,IAAID,MAAM;MACrB,IAAI,CAACE,MAAM,CAACN,KAAK,CAAC;IACpB;IAEAoB,IAAIA,CAAChB,MAAc;MACjB,MAAMJ,KAAK,GAAG,IAAI,CAACF,OAAO,CAAC/C,KAAK;MAChC,IAAI,CAACiD,KAAK,EAAE;MACZA,KAAK,CAACe,EAAE,IAAIX,MAAM;MAClB,IAAI,CAACE,MAAM,CAACN,KAAK,CAAC;IACpB;IAEAqB,WAAWA,CAACC,OAA6B;MACvC,MAAMtB,KAAK,GAAG,IAAI,CAACF,OAAO,CAAC/C,KAAK;MAChC,IAAI,CAACiD,KAAK,EAAE;MACZ,IAAI,CAACM,MAAM,CAAC;QAAE,GAAGN,KAAK;QAAE,GAAGsB;MAAO,CAAE,CAAC;IACvC;IAEAzF,iBAAiBA,CAAA;MACf,MAAM0F,MAAM,GAAG,IAAI,CAACzB,OAAO,CAAC/C,KAAK;MACjC,OAAOwE,MAAM,GAAG7B,8FAAuB,CAAC6B,MAAM,CAAC,GAAG,IAAI;IACxD;IAEAC,kBAAkBA,CAAA;MAChB,MAAMxB,KAAK,GAAG,IAAI,CAACF,OAAO,CAAC/C,KAAK;MAChC,IAAI,CAACiD,KAAK,IAAI,CAACA,KAAK,CAACyB,WAAW,EAAE;MAElC,MAAMpF,GAAG,GAAG,IAAID,IAAI,EAAE;MACtB,MAAMsF,UAAU,GAAG1B,KAAK,CAACyB,WAAW,CAACzF,MAAM,CAAC2F,IAAI,IAAG;QACjD,MAAMC,UAAU,GAAID,IAAY,CAACC,UAAU;QAC3C,OAAO,CAACA,UAAU,IAAI,IAAIxF,IAAI,CAACwF,UAAU,CAAC,GAAGvF,GAAG;MAClD,CAAC,CAAC;MAEF,IAAIqF,UAAU,CAACG,MAAM,KAAK7B,KAAK,CAACyB,WAAW,CAACI,MAAM,EAAE;QAClD,IAAI,CAACvB,MAAM,CAAC;UAAE,GAAGN,KAAK;UAAEyB,WAAW,EAAEC;QAAU,CAAE,CAAC;MACpD;IACF;IAGAI,SAASA,CAACC,IAAU;MAClB,MAAM/B,KAAK,GAAG,IAAI,CAACF,OAAO,CAAC/C,KAAK;MAChC,IAAI,CAACiD,KAAK,IAAI,CAAC+B,IAAI,CAACC,IAAI,EAAE;MAC1B,MAAMC,QAAQ,GAAG,CAACjC,KAAK,CAACkC,aAAa,IAAI,EAAE,EAAElG,MAAM,CAACmG,CAAC,IAAIA,CAAC,CAACH,IAAI,KAAKD,IAAI,CAACC,IAAI,CAAC;MAC9E,MAAMI,WAAW,GAAG;QAAE,GAAGL,IAAI;QAAEM,QAAQ,EAAE;MAAI,CAAE;MAC/CrC,KAAK,CAACkC,aAAa,GAAG,CAAC,GAAGD,QAAQ,EAAEG,WAAW,CAAC;MAChD,IAAI,CAAC9B,MAAM,CAACN,KAAK,CAAC;IACpB;IAEAsC,WAAWA,CAACN,IAAY;MACtB,MAAMhC,KAAK,GAAG,IAAI,CAACF,OAAO,CAAC/C,KAAK;MAChC,IAAI,CAACiD,KAAK,EAAE;MACZA,KAAK,CAACkC,aAAa,GAAG,CAAClC,KAAK,CAACkC,aAAa,IAAI,EAAE,EAAElG,MAAM,CAACmG,CAAC,IAAIA,CAAC,CAACH,IAAI,KAAKA,IAAI,CAAC;MAC9E,IAAI,CAAC1B,MAAM,CAACN,KAAK,CAAC;IACpB;IAEAuC,OAAOA,CAACR,IAAU,EAAES,UAAkB;MACpC,MAAMxC,KAAK,GAAG,IAAI,CAACF,OAAO,CAAC/C,KAAK;MAChC,IAAI,CAACiD,KAAK,EAAE;MACZ,MAAMyC,QAAQ,GAAG;QACf,GAAGV,IAAI;QACPH,UAAU,EAAE,IAAIxF,IAAI,CAACA,IAAI,CAACC,GAAG,EAAE,GAAGmG,UAAU;OAC7C;MACDxC,KAAK,CAACyB,WAAW,GAAG,CAAC,IAAIzB,KAAK,CAACyB,WAAW,IAAI,EAAE,CAAC,EAAEgB,QAAQ,CAAC;MAC5D,IAAI,CAACnC,MAAM,CAACN,KAAK,CAAC;IACpB;IAEQM,MAAMA,CAACoC,OAAoB;MACjC,IAAI,CAAC5C,OAAO,CAACtD,IAAI,CAAC;QAAE,GAAGkG;MAAO,CAAE,CAAC;MACjC,IAAI,CAAC5H,QAAQ,CAACyC,iBAAiB,EAAE;IACnC;;uBAjIW/C,aAAa,EAAAkD,sDAAA,CAAAE,+DAAA,GAAAF,sDAAA,CAAAG,qEAAA;IAAA;;aAAbrD,aAAa;MAAAwD,OAAA,EAAbxD,aAAa,CAAAyD,IAAA;MAAAC,UAAA,EADA;IAAM;;SACnB1D,aAAa;AAAA,K;;;;;;;;;;;;;;;;ACPnB,IAAME,YAAY;EAAnB,MAAOA,YAAY;IACvBiI,IAAIA,CAACC,GAAW;MACd,MAAMC,KAAK,GAAG,IAAIC,KAAK,CAACF,GAAG,CAAC;MAC5BC,KAAK,CAACE,MAAM,GAAG,GAAG,CAAC,CAAC;MACpBF,KAAK,CAACF,IAAI,EAAE,CAACK,KAAK,CAACC,GAAG,IAAIC,OAAO,CAACC,KAAK,CAAC,cAAc,EAAEF,GAAG,CAAC,CAAC;IAC/D;IAEA9F,UAAUA,CAACiG,IAAY;MACrB,IAAI,CAACT,IAAI,CAAC,kBAAkBS,IAAI,MAAM,CAAC;IACzC;IAEAC,aAAaA,CAAC/H,MAAc;MAC1B,IAAI,CAACqH,IAAI,CAAC,uBAAuBrH,MAAM,MAAM,CAAC;IAChD;;uBAbWZ,YAAY;IAAA;;aAAZA,YAAY;MAAAsD,OAAA,EAAZtD,YAAY,CAAAuD,IAAA;MAAAC,UAAA,EADC;IAAM;;SACnBxD,YAAY;AAAA,K;;;;;;;;;;;;;;ACCnB,SAAUgF,uBAAuBA,CAAC6B,MAAmB;EACzD,MAAMlF,GAAG,GAAG,IAAID,IAAI,EAAE;EAEtB,MAAMkH,YAAY,GAA0B,CAAC,UAAU,EAAE,SAAS,EAAE,cAAc,EAAE,IAAI,CAAC;EAEzF,MAAMC,OAAO,GAAsC;IAC/CvC,QAAQ,EAAE,CAAC;IACXC,OAAO,EAAE,CAAC;IACVC,YAAY,EAAE,CAAC;IACfH,EAAE,EAAE,CAAC;IACLV,KAAK,EAAE,CAAC;IACRI,KAAK,EAAE,CAAC;IACRE,UAAU,EAAE,CAAC;IACb6C,eAAe,EAAE,CAAC;IAClBtB,aAAa,EAAE,CAAC;IAChBT,WAAW,EAAE,CAAC;IACdgC,kBAAkB,EAAE,CAAC;IACrBC,gBAAgB,EAAE;GACrB;EAED;EACA,KAAK,MAAM3B,IAAI,IAAIR,MAAM,CAACW,aAAa,IAAI,EAAE,EAAE;IAC7C,IAAI,CAACH,IAAI,CAAC4B,UAAU,EAAE;IAEtB,KAAK,MAAMC,GAAG,IAAI7B,IAAI,CAAC4B,UAAU,EAAE;MACjC,MAAME,IAAI,GAAGD,GAAwB;MACrC,MAAME,GAAG,GAAG/B,IAAI,CAAC4B,UAAU,CAACE,IAAI,CAAC;MACjC,IAAIP,YAAY,CAACS,QAAQ,CAACF,IAAI,CAAC,IAAI,OAAOC,GAAG,KAAK,QAAQ,EAAE;QAC1DP,OAAO,CAACM,IAAI,CAAC,IAAIC,GAAG,CAAC,CAAC;MACxB;IACF;EACF;EAEA;EACA,KAAK,MAAM/B,IAAI,IAAKR,MAAM,CAACE,WAAW,IAAI,EAAE,EAAG;IAC7C,MAAMG,UAAU,GAAIG,IAAY,CAACH,UAA8B;IAC/D,IAAIA,UAAU,IAAI,IAAIxF,IAAI,EAAE,GAAG,IAAIA,IAAI,CAACwF,UAAU,CAAC,EAAE;IAErD,IAAI,CAACG,IAAI,CAAC4B,UAAU,EAAE;IAEtB,KAAK,MAAMC,GAAG,IAAI7B,IAAI,CAAC4B,UAAU,EAAE;MACjC,MAAME,IAAI,GAAGD,GAAwB;MACrC,MAAME,GAAG,GAAG/B,IAAI,CAAC4B,UAAU,CAACE,IAAI,CAAC;MACjC,IAAIP,YAAY,CAACS,QAAQ,CAACF,IAAI,CAAC,IAAI,OAAOC,GAAG,KAAK,QAAQ,EAAE;QAC1DP,OAAO,CAACM,IAAI,CAAC,IAAIC,GAAG,CAAC,CAAC;MACxB;IACF;EACF;EAEA,OAAO;IACL,GAAGvC,MAAM;IACTP,QAAQ,EAAEO,MAAM,CAACP,QAAQ,GAAGuC,OAAO,CAACvC,QAAQ;IAC5CC,OAAO,EAAEM,MAAM,CAACN,OAAO,GAAGsC,OAAO,CAACtC,OAAO;IACzCC,YAAY,EAAEK,MAAM,CAACL,YAAY,GAAGqC,OAAO,CAACrC,YAAY;IACxDH,EAAE,EAAEQ,MAAM,CAACR,EAAE,GAAGwC,OAAO,CAACxC;GACzB;AACH,C;;;;;;;;;;;;;;ACzDM,SAAUzG,iBAAiBA,CAAC0J,UAAgC,EAAEhE,KAAkB;EACpF,OAAOgE,UAAU,CAACC,KAAK,CAACC,IAAI,IAAG;IAC7B,MAAMC,OAAO,GAAGnE,KAAK,CAACkE,IAAI,CAACL,IAAI,CAAC;IAChC,IAAI,OAAOM,OAAO,KAAK,QAAQ,EAAE,OAAO,KAAK;IAE7C,QAAQD,IAAI,CAACE,QAAQ;MACnB,KAAK,IAAI;QAAE,OAAOD,OAAO,IAAID,IAAI,CAACnH,KAAK;MACvC,KAAK,IAAI;QAAE,OAAOoH,OAAO,IAAID,IAAI,CAACnH,KAAK;MACvC,KAAK,GAAG;QAAE,OAAOoH,OAAO,GAAGD,IAAI,CAACnH,KAAK;MACrC,KAAK,GAAG;QAAE,OAAOoH,OAAO,GAAGD,IAAI,CAACnH,KAAK;MACrC,KAAK,IAAI;QAAE,OAAOoH,OAAO,KAAKD,IAAI,CAACnH,KAAK;MACxC,KAAK,IAAI;QAAE,OAAOoH,OAAO,KAAKD,IAAI,CAACnH,KAAK;MACxC;QAAS,OAAO,KAAK;IACvB;EACF,CAAC,CAAC;AACJ,C;;;;;;;;;;;;;;;AClBO,MAAMsH,QAAQ,GAAG,CACtB,CAAC;AAAM;AACP,GAAG;AAAI;AACP,GAAG;AAAI;AACP,GAAG;AAAI;AACP,IAAI;AAAG;AACP,IAAI;AAAG;AACP,IAAI;AAAG;AACP,IAAI;AAAG;AACP,IAAI;AAAG;AACP,IAAI,CAAG;AAAA,CACR;AAEK,SAAU1E,aAAaA,CAAC2E,EAAU;EACtC,KAAK,IAAInC,CAAC,GAAGkC,QAAQ,CAACxC,MAAM,GAAG,CAAC,EAAEM,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;IAC7C,IAAImC,EAAE,IAAID,QAAQ,CAAClC,CAAC,CAAC,EAAE,OAAOA,CAAC,GAAG,CAAC;EACrC;EACA,OAAO,CAAC;AACV,C;;;;;;;;;;;;;;;;AClB+C;AACD;AACvC,SAAS/D,cAAcA,CAACqG,MAAM,EAAEC,MAAM,EAAE;EAC3C,MAAMC,SAAS,GAAG,OAAOD,MAAM,KAAK,QAAQ;EAC5C,OAAO,IAAIE,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACpC,MAAMC,UAAU,GAAG,IAAIP,uDAAc,CAAC;MAClChI,IAAI,EAAGO,KAAK,IAAK;QACb8H,OAAO,CAAC9H,KAAK,CAAC;QACdgI,UAAU,CAACC,WAAW,CAAC,CAAC;MAC5B,CAAC;MACD7B,KAAK,EAAE2B,MAAM;MACbG,QAAQ,EAAEA,CAAA,KAAM;QACZ,IAAIN,SAAS,EAAE;UACXE,OAAO,CAACH,MAAM,CAACQ,YAAY,CAAC;QAChC,CAAC,MACI;UACDJ,MAAM,CAAC,IAAIP,wDAAU,CAAC,CAAC,CAAC;QAC5B;MACJ;IACJ,CAAC,CAAC;IACFE,MAAM,CAACU,SAAS,CAACJ,UAAU,CAAC;EAChC,CAAC,CAAC;AACN,C","sources":["./src/app/core/services/battle.service.ts","./src/app/core/services/game-save.service.ts","./src/app/core/services/player.service.ts","./src/app/core/services/sound.service.ts","./src/app/core/utils/calculate-effective-stats.ts","./src/app/core/utils/evaluate-condition.ts","./src/app/core/utils/xp-curve.ts","./node_modules/rxjs/dist/esm/internal/firstValueFrom.js"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { Boss } from '../models/boss.model';\r\nimport { GameState } from '../models/game-state.model';\r\nimport { Battle } from '../models/battle.model';\r\nimport { evaluateCondition } from '../utils/evaluate-condition';\r\nimport { Router } from '@angular/router';\r\nimport { PlayerService } from './player.service';\r\nimport { GameSaveService } from './game-save.service';\r\nimport { SoundService } from './sound.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class BattleService {\r\n  private currentBattle$ = new BehaviorSubject<Battle | null>(null);\r\n  private gameState!: GameState;\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private playerService: PlayerService,\r\n    private gameSave: GameSaveService,\r\n    private soundService: SoundService\r\n  ) { }\r\n\r\n  setGameState(state: GameState) {\r\n    this.gameState = state;\r\n  }\r\n\r\n startBattle(bossId: string): void {\r\n  const boss = this.gameState.bosses.find(b => b.id === bossId);\r\n  if (!boss) return;\r\n\r\n  const effectivePlayerStats = this.playerService.getEffectiveStats();\r\n  if (!effectivePlayerStats) return;\r\n\r\n  const unlockedAdvantages = boss.advantages.filter(adv =>\r\n    evaluateCondition(adv.condition, effectivePlayerStats)\r\n  );\r\n\r\n  const battle: Battle = {\r\n    id: `${bossId}-${Date.now()}`,\r\n    bossId: boss.id,\r\n    advantagesUnlocked: unlockedAdvantages,\r\n    startedAt: new Date()\r\n  };\r\n\r\n  this.currentBattle$.next(battle);\r\n}\r\n\r\n\r\n  getCurrentBattle() {\r\n    return this.currentBattle$.asObservable();\r\n  }\r\n\r\n  async finishBattle(won: boolean): Promise<void> {\r\n    const battle = this.currentBattle$.value;\r\n    if (!battle) return;\r\n\r\n    battle.outcome = won ? 'win' : 'loss';\r\n    battle.finishedAt = new Date();\r\n\r\n    const boss = this.gameState.bosses.find(b => b.id === battle.bossId);\r\n    if (boss) {\r\n      if (won) {\r\n        boss.defeated = true;\r\n        this.soundService.playEffect(\"boss-besiegt-quest-erfuellt\");\r\n      } else {                \r\n        boss.attempts = (boss.attempts || 0) + 1;\r\n        this.soundService.playEffect(\"hp-null\");\r\n      }\r\n    }\r\n\r\n    this.gameState.battles.push(battle);\r\n    this.currentBattle$.next(null);\r\n\r\n    await this.gameSave.updateCurrentGame();\r\n\r\n    this.router.navigate(['/game']);\r\n  }\r\n\r\n  getSnapshot(): Battle[] {\r\n    return this.gameState.battles;\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { NgxIndexedDBService } from 'ngx-indexed-db';\r\nimport { GameState } from '../models/game-state.model';\r\nimport { firstValueFrom } from 'rxjs';\r\nimport { PlayerService } from './player.service';\r\nimport { InventoryService } from './inventory.service';\r\nimport { ShopService } from './shop.service';\r\nimport { BattleService } from './battle.service';\r\nimport { BossService } from './boss.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class GameSaveService {\r\n  private lastGameStateId!: number;\r\n  private currentSnapshotBuilder!: () => GameState;\r\n\r\n  constructor(private db: NgxIndexedDBService) {}\r\n\r\n  registerSnapshotBuilder(builder: () => GameState) {\r\n    this.currentSnapshotBuilder = builder;\r\n  }\r\n\r\n  async saveNewGame(state: Omit<GameState, 'id'>): Promise<GameState> {\r\n    state.updatedAt = new Date();\r\n    const result = await firstValueFrom(this.db.add('gameStates', state));\r\n    const id = typeof result === 'number' ? result : (result as any).id;\r\n    this.lastGameStateId = id;\r\n    return { ...state, id };\r\n  }\r\n\r\n  async updateCurrentGame(): Promise<GameState> {\r\n    if (!this.currentSnapshotBuilder) throw new Error('No snapshot builder registered.');\r\n    const snapshot = this.currentSnapshotBuilder();\r\n    snapshot.updatedAt = new Date();\r\n    return this.updateGame(snapshot);\r\n  }\r\n\r\n  async updateGame(state: GameState): Promise<GameState> {\r\n    await firstValueFrom(this.db.update('gameStates', state));\r\n    return state;\r\n  }\r\n\r\n  async loadGame(id: number): Promise<GameState> {\r\n    this.lastGameStateId = id;\r\n    return firstValueFrom(this.db.getByKey('gameStates', id));\r\n  }\r\n\r\n  async listGames(): Promise<GameState[]> {\r\n    return firstValueFrom(this.db.getAll('gameStates'));\r\n  }\r\n}\r\n\r\n  /* deleteGame(id: number): Promise<void> {\r\n   return firstValueFrom(this.db.delete('gameStates', id));\r\n   }*/\r\n\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { PlayerStats } from '../models/player-stats.model';\r\nimport { Item } from '@core/models/item.model';\r\nimport { calculateEffectiveStats } from '@core/utils/calculate-effective-stats';\r\nimport { GameSaveService } from './game-save.service';\r\nimport { getLevelForXp } from '../utils/xp-curve';\r\nimport { ToastService } from '@views/toasts/toast.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class PlayerService {\r\n  private player$ = new BehaviorSubject<PlayerStats | null>(null);\r\n\r\n  constructor(private gameSave: GameSaveService, private toast: ToastService) { }\r\n\r\n  setPlayer(stats: PlayerStats) {\r\n    this.player$.next({ ...stats });\r\n  }\r\n\r\n  getPlayer() {\r\n    return this.player$.asObservable();\r\n  }\r\n\r\n  getSnapshot(): PlayerStats | null {\r\n    return this.player$.value;\r\n  }\r\n\r\n  updatePlayer(stats: PlayerStats) {\r\n    this.player$.next({ ...stats });\r\n    this.gameSave.updateCurrentGame();\r\n  }\r\n\r\n  pay(amount: number): boolean {\r\n    const stats = this.player$.value;\r\n    if (!stats || stats.money < amount) return false;\r\n\r\n    stats.money -= amount;\r\n    this.commit(stats); // nutzt jetzt zentrale commit-Methode\r\n    return true;\r\n  }\r\n\r\n  addXp(amount: number) {\r\n    const stats = this.player$.value;\r\n    if (!stats) return;\r\n\r\n    const oldLevel = stats.level;\r\n    const newXp = stats.experience + amount;\r\n    const newLevel = getLevelForXp(newXp);\r\n\r\n    const levelDiff = newLevel - oldLevel;\r\n\r\n    if (levelDiff > 0) {\r\n      this.toast.show(`Du bist jetzt Level ${newLevel}!`);\r\n\r\n      // Dauerhafte Stat-Increases (Basiswerte!)\r\n      stats.hp += 3 * levelDiff;\r\n      stats.strength += 1 * levelDiff;\r\n      stats.agility += 1 * levelDiff;\r\n      stats.intelligence += 1 * levelDiff;\r\n    }\r\n\r\n    this.commit({\r\n      ...stats,\r\n      experience: newXp,\r\n      level: newLevel\r\n    });\r\n  }\r\n\r\n  addMoney(amount: number) {\r\n    const stats = this.player$.value;\r\n    if (!stats) return;\r\n    stats.money += amount;\r\n    this.commit(stats);\r\n  }\r\n\r\n  heal(amount: number) {\r\n    const stats = this.player$.value;\r\n    if (!stats) return;\r\n    stats.hp += amount;\r\n    this.commit(stats);\r\n  }\r\n\r\n  updateStats(partial: Partial<PlayerStats>) {\r\n    const stats = this.player$.value;\r\n    if (!stats) return;\r\n    this.commit({ ...stats, ...partial });\r\n  }\r\n\r\n  getEffectiveStats(): PlayerStats | null {\r\n    const player = this.player$.value;\r\n    return player ? calculateEffectiveStats(player) : null;\r\n  }\r\n\r\n  removeExpiredBuffs() {\r\n    const stats = this.player$.value;\r\n    if (!stats || !stats.activeBuffs) return;    \r\n\r\n    const now = new Date();\r\n    const stillValid = stats.activeBuffs.filter(buff => {\r\n      const validUntil = (buff as any).validUntil;\r\n      return !validUntil || new Date(validUntil) > now;\r\n    });\r\n\r\n    if (stillValid.length !== stats.activeBuffs.length) {\r\n      this.commit({ ...stats, activeBuffs: stillValid });\r\n    }\r\n  }\r\n\r\n\r\n  equipItem(item: Item): void {\r\n    const stats = this.player$.value;\r\n    if (!stats || !item.slot) return;\r\n    const filtered = (stats.equippedItems ?? []).filter(i => i.slot !== item.slot);\r\n    const updatedItem = { ...item, equipped: true };\r\n    stats.equippedItems = [...filtered, updatedItem];\r\n    this.commit(stats);\r\n  }\r\n\r\n  unequipItem(slot: string): void {\r\n    const stats = this.player$.value;\r\n    if (!stats) return;\r\n    stats.equippedItems = (stats.equippedItems ?? []).filter(i => i.slot !== slot);\r\n    this.commit(stats);\r\n  }\r\n\r\n  addBuff(item: Item, durationMs: number) {\r\n    const stats = this.player$.value;\r\n    if (!stats) return;\r\n    const buffItem = {\r\n      ...item,\r\n      validUntil: new Date(Date.now() + durationMs)\r\n    };\r\n    stats.activeBuffs = [...(stats.activeBuffs ?? []), buffItem];\r\n    this.commit(stats);\r\n  }\r\n\r\n  private commit(updated: PlayerStats) {\r\n    this.player$.next({ ...updated });\r\n    this.gameSave.updateCurrentGame();\r\n  }\r\n}\r\n\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class SoundService {\r\n  play(src: string): void {\r\n    const audio = new Audio(src);\r\n    audio.volume = 0.8; // anpassbar\r\n    audio.play().catch(err => console.error('Soundfehler:', err));\r\n  }\r\n\r\n  playEffect(name: string): void {\r\n    this.play(`/assets/sounds/${name}.mp3`);\r\n  }\r\n\r\n  playBossMusic(bossId: string): void {\r\n    this.play(`/assets/sounds/boss-${bossId}.mp3`);\r\n  }\r\n\r\n\r\n}\r\n","// utils/calculate-effective-stats.ts\r\nimport { PlayerStats } from '../models/player-stats.model';\r\nimport { Item } from '../models/item.model';\r\n\r\nexport function calculateEffectiveStats(player: PlayerStats): PlayerStats {\r\n  const now = new Date();\r\n\r\n  const numericStats: (keyof PlayerStats)[] = ['strength', 'agility', 'intelligence', 'hp'];\r\n\r\n  const bonuses: Record<keyof PlayerStats, number> = {\r\n      strength: 0,\r\n      agility: 0,\r\n      intelligence: 0,\r\n      hp: 0,\r\n      money: 0,\r\n      level: 0,\r\n      experience: 0,\r\n      questsCompleted: 0,\r\n      equippedItems: 0,\r\n      activeBuffs: 0,\r\n      lastBuffFoodUsedAt: 0,\r\n      lastPotionUsedAt: 0\r\n  };\r\n\r\n  // Ausrüstung\r\n  for (const item of player.equippedItems ?? []) {\r\n    if (!item.bonusStats) continue;\r\n\r\n    for (const key in item.bonusStats) {\r\n      const stat = key as keyof PlayerStats;\r\n      const val = item.bonusStats[stat];\r\n      if (numericStats.includes(stat) && typeof val === 'number') {\r\n        bonuses[stat] += val; // ✅ berücksichtigt auch negative Werte\r\n      }\r\n    }\r\n  }\r\n\r\n  // Aktive Buffs\r\n  for (const item of (player.activeBuffs ?? [])) {\r\n    const validUntil = (item as any).validUntil as Date | undefined;\r\n    if (validUntil && new Date() > new Date(validUntil)) continue;\r\n\r\n    if (!item.bonusStats) continue;\r\n\r\n    for (const key in item.bonusStats) {\r\n      const stat = key as keyof PlayerStats;\r\n      const val = item.bonusStats[stat];\r\n      if (numericStats.includes(stat) && typeof val === 'number') {\r\n        bonuses[stat] += val; // ✅ auch hier: negativ erlaubt\r\n      }\r\n    }\r\n  }\r\n\r\n  return {\r\n    ...player,\r\n    strength: player.strength + bonuses.strength,\r\n    agility: player.agility + bonuses.agility,\r\n    intelligence: player.intelligence + bonuses.intelligence,\r\n    hp: player.hp + bonuses.hp,\r\n  };\r\n}\r\n","import { AdvantageCondition } from '../models/boss.model';\r\nimport { PlayerStats } from '../models/player-stats.model';\r\n\r\nexport function evaluateCondition(conditions: AdvantageCondition[], stats: PlayerStats): boolean {\r\n  return conditions.every(cond => {\r\n    const statVal = stats[cond.stat];\r\n    if (typeof statVal !== 'number') return false;\r\n\r\n    switch (cond.operator) {\r\n      case '>=': return statVal >= cond.value;\r\n      case '<=': return statVal <= cond.value;\r\n      case '>': return statVal > cond.value;\r\n      case '<': return statVal < cond.value;\r\n      case '==': return statVal === cond.value;\r\n      case '!=': return statVal !== cond.value;\r\n      default: return false;\r\n    }\r\n  });\r\n}\r\n\r\n\r\n","export const XP_TABLE = [\r\n  0,     // Level 1\r\n  100,   // Level 2\r\n  350,   // Level 3\r\n  700,   // Level 4\r\n  1200,  // Level 5\r\n  1900,  // Level 6\r\n  2800,  // Level 7\r\n  3900,  // Level 8\r\n  5200,  // Level 9\r\n  7400   // Level 10\r\n];\r\n\r\nexport function getLevelForXp(xp: number): number {\r\n  for (let i = XP_TABLE.length - 1; i >= 0; i--) {\r\n    if (xp >= XP_TABLE[i]) return i + 1;\r\n  }\r\n  return 1;\r\n}","import { EmptyError } from './util/EmptyError';\nimport { SafeSubscriber } from './Subscriber';\nexport function firstValueFrom(source, config) {\n    const hasConfig = typeof config === 'object';\n    return new Promise((resolve, reject) => {\n        const subscriber = new SafeSubscriber({\n            next: (value) => {\n                resolve(value);\n                subscriber.unsubscribe();\n            },\n            error: reject,\n            complete: () => {\n                if (hasConfig) {\n                    resolve(config.defaultValue);\n                }\n                else {\n                    reject(new EmptyError());\n                }\n            },\n        });\n        source.subscribe(subscriber);\n    });\n}\n"],"names":["BehaviorSubject","evaluateCondition","Router","PlayerService","GameSaveService","SoundService","BattleService","router","playerService","gameSave","soundService","currentBattle$","gameState","constructor","setGameState","state","startBattle","bossId","boss","bosses","find","b","id","effectivePlayerStats","getEffectiveStats","unlockedAdvantages","advantages","filter","adv","condition","battle","Date","now","advantagesUnlocked","startedAt","next","getCurrentBattle","asObservable","finishBattle","won","_this","_asyncToGenerator","value","outcome","finishedAt","defeated","playEffect","attempts","battles","push","updateCurrentGame","navigate","getSnapshot","i0","ɵɵinject","i1","i2","i3","i4","factory","ɵfac","providedIn","NgxIndexedDBService","firstValueFrom","db","lastGameStateId","currentSnapshotBuilder","registerSnapshotBuilder","builder","saveNewGame","updatedAt","result","add","_this2","Error","snapshot","updateGame","_this3","update","loadGame","_this4","getByKey","listGames","_this5","getAll","calculateEffectiveStats","getLevelForXp","ToastService","toast","player$","setPlayer","stats","getPlayer","updatePlayer","pay","amount","money","commit","addXp","oldLevel","level","newXp","experience","newLevel","levelDiff","show","hp","strength","agility","intelligence","addMoney","heal","updateStats","partial","player","removeExpiredBuffs","activeBuffs","stillValid","buff","validUntil","length","equipItem","item","slot","filtered","equippedItems","i","updatedItem","equipped","unequipItem","addBuff","durationMs","buffItem","updated","play","src","audio","Audio","volume","catch","err","console","error","name","playBossMusic","numericStats","bonuses","questsCompleted","lastBuffFoodUsedAt","lastPotionUsedAt","bonusStats","key","stat","val","includes","conditions","every","cond","statVal","operator","XP_TABLE","xp","EmptyError","SafeSubscriber","source","config","hasConfig","Promise","resolve","reject","subscriber","unsubscribe","complete","defaultValue","subscribe"],"sourceRoot":"webpack:///","x_google_ignoreList":[7]}